dotnet new globaljson --sdk-version 6.0.0 --roll-forward latestMinor -o CleanWebAppTemplate
dotnet new gitignore -o CleanWebAppTemplate
dotnet new sln -o CleanWebAppTemplate

dotnet new web -o CleanWebAppTemplate/src/CleanWebAppTemplate.Api --framework net6.0
dotnet new classlib -o CleanWebAppTemplate/src/CleanWebAppTemplate.Application --framework net6.0
dotnet new classlib -o CleanWebAppTemplate/src/CleanWebAppTemplate.Infrastructure --framework net6.0
dotnet new classlib -o CleanWebAppTemplate/src/CleanWebAppTemplate.Domain --framework net6.0
dotnet new xunit -o CleanWebAppTemplate/tests/CleanWebAppTemplate.Application.IntegrationTests --framework net6.0
dotnet new xunit -o CleanWebAppTemplate/tests/CleanWebAppTemplate.Application.UnitTests --framework net6.0
dotnet new xunit -o CleanWebAppTemplate/tests/CleanWebAppTemplate.Domain.UnitTests --framework net6.0

dotnet sln CleanWebAppTemplate add (ls -r CleanWebAppTemplate/**/*.csproj)

dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Api reference CleanWebAppTemplate/src/CleanWebAppTemplate.Application
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Api reference CleanWebAppTemplate/src/CleanWebAppTemplate.Infrastructure
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Infrastructure reference CleanWebAppTemplate/src/CleanWebAppTemplate.Application
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Application reference CleanWebAppTemplate/src/CleanWebAppTemplate.Domain
dotnet add CleanWebAppTemplate/tests/CleanWebAppTemplate.Application.IntegrationTests reference CleanWebAppTemplate/src/CleanWebAppTemplate.Api
dotnet add CleanWebAppTemplate/tests/CleanWebAppTemplate.Application.UnitTests reference CleanWebAppTemplate/src/CleanWebAppTemplate.Application
dotnet add CleanWebAppTemplate/tests/CleanWebAppTemplate.Application.UnitTests reference CleanWebAppTemplate/src/CleanWebAppTemplate.Infrastructure
dotnet add CleanWebAppTemplate/tests/CleanWebAppTemplate.Domain.UnitTests reference CleanWebAppTemplate/src/CleanWebAppTemplate.Domain


2. Установить пакеты
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Api package Swashbuckle.AspNetCore
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Api package Microsoft.AspNetCore.Mvc.Versioning
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Api package Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Api package Microsoft.EntityFrameworkCore.Design
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Api package FluentValidation.AspNetCore

dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Application package Microsoft.Extensions.DependencyInjection.Abstractions
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Application package Microsoft.Extensions.Configuration.Abstractions
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Application package Microsoft.Extensions.Configuration.Binder
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Application package Microsoft.Extensions.Options
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Application package Microsoft.Extensions.Options.ConfigurationExtensions
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Application package Microsoft.EntityFrameworkCore
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Application package AutoMapper.Extensions.Microsoft.DependencyInjection
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Application package FluentValidation.DependencyInjectionExtensions
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Application package MediatR.Extensions.Microsoft.DependencyInjection

dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Infrastructure package Npgsql.EntityFrameworkCore.PostgreSQL
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Infrastructure package System.IdentityModel.Tokens.Jwt
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Infrastructure package Microsoft.AspNetCore.Authentication
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Infrastructure package Microsoft.AspNetCore.Authentication.JwtBearer --version 6.0.12

dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Domain package MediatR
dotnet add CleanWebAppTemplate/src/CleanWebAppTemplate.Domain package Microsoft.AspNetCore.Http.Abstractions

dotnet add CleanWebAppTemplate/tests/Application.IntegrationTests package
dotnet add CleanWebAppTemplate/tests/Application.UnitTests
dotnet add CleanWebAppTemplate/tests/Domain.UnitTests


3. Создать .editorconfig
root = true

# All files
[*]
indent_style = space

# Xml files
[*.xml]
indent_size = 2

# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_size = 4
tab_width = 4

# New line preferences
end_of_line = crlf
insert_final_newline = false


4. Добавить в папку Solution Items файлы gitignore, global.json


5. Создать папки
Api:
	Controllers
	Extensions
	Configuration
Application:
	Exceptions
	Extensions
	Interfaces
	Behaviours
	MapperProfiles
	Models
		[ModelName]
			Commands
			Queries
			EventHandlers
		{Common models}


Infrastructure:
	Data
	Services
	Extensions
	Configuration
Domain:
	Common (базовые "абстрактные" сущности)
	Entities
	Enums
	Events
	Exceptions
	ValueObjects


5. Дбоавить конфигурации сервисов
Microsoft.Extensions.DependencyInjection ServiceCollectionExtensions

5.1 Сервисы:
	Controllers
	HttpContextAccessor
	ApiVersioning
	Swagger
	HealthCheck


6. Создать миграцию БД
dotnet ef migrations add "Init" --project .\CleanWebAppTemplate\src\CleanWebAppTemplate.Infrastructure\ --startup-project .\CleanWebAppTemplate\src\CleanWebAppTemplate.Api\ --output-dir Data\Migrations

dotnet ef database update --project .\CleanWebAppTemplate\src\CleanWebAppTemplate.Infrastructure\ --startup-project .\CleanWebAppTemplate\src\CleanWebAppTemplate.Api\


7. Секреты
dotnet user-secrets init --project .\CleanWebAppTemplate\src\CleanWebAppTemplate.Api\

============================================================================
Комментарии

Domain
Не использовать Data Annotations в domain сущностях, использовать Fluent API
Использовать Value Objects там где уместно
Использовать пользовательские исключения
Инициализировать все коллекции

Application
CQRS + MediatR
Fluent Validation
AutoMapper

Infrastructure
Независимость от базы данных
Fluent API (data annotations)
Там где возможно использовать conventions вместо configuration (меньше кода)
Никакой из слоев не зависит от Infrastructure

Api (Web, UI и т.д.)
В контроллерах не должно быть никакой логики
ViewModels
Open API (swagger)

Log Event Levels
============================================================================
Verbose - tracing information and debugging minutiae; generally only switched on in unusual situations
Debug - internal control flow and diagnostic state dumps to facilitate pinpointing of recognised problems
Information - events of interest or that have relevance to outside observers; the default enabled minimum logging level
Warning - indicators of possible issues or service/functionality degradation
Error - indicating a failure within the application or connected system
Fatal - critical errors causing complete failure of the application


============================================================================
Черновик

dotnet pack --configuration Release
dotnet nuget push [.nupkg PATH] -s https://api.nuget.org/v3/index.json -k [KEY]

dotnet ef migrations add "Init" --project .\src\RNB.DealerAccount.Infrastructure\ --startup-project .\src\RNB.DealerAccount.Api\ --context ApplicationDbContext --output-dir Data\Migrations

dotnet ef migrations remove --project .\src\RNB.DealerAccount.Infrastructure\ --startup-project .\src\RNB.DealerAccount.Api\ --context ApplicationDbContext

dotnet ef database update --project .\src\RNB.DealerAccount.Infrastructure\ --startup-project .\src\RNB.DealerAccount.Api\ --context ApplicationDbContext

dotnet ef dbcontext scaffold "Host=192.168.0.100;Port=5432;Database=RNB_CFT;Username=rnb_dealeraccount_admin;Password=P@ssw0rd123" Npgsql.EntityFrameworkCore.PostgreSQL --project .\src\RNB.DealerAccount.Infrastructure\ --startup-project .\src\RNB.DealerAccount.Api\ --context RnbDbContext --context-dir Data --context-namespace RNB.DealerAccount.Infrastructure.Data --output-dir C:\Users\samwi\source\repos\RNB.DealerAccount\src\RNB.DealerAccount.Domain\Cft\ --namespace RNB.DealerAccount.Domain.Cft --force

dotnet ef dbcontext scaffold "Host=192.168.0.100;Port=5432;Database=RNB_CFT;Username=srv0079_0153;Password=67FsoD66&&tt" Npgsql.EntityFrameworkCore.PostgreSQL --force


dotnet ef migrations add "UserCode__DealerName" --project .\src\RNB.DealerAccount.Infrastructure\ --startup-project .\src\RNB.DealerAccount.Api\ --context ApplicationDbContext --output-dir Data\Migrations

dotnet ef database update "20231004085816_Navigation_Permissions" --project .\src\RNB.DealerAccount.Infrastructure\ --startup-project .\src\RNB.DealerAccount.Api\ --context ApplicationDbContext

dotnet ef migrations remove --project .\src\RNB.DealerAccount.Infrastructure\ --startup-project .\src\RNB.DealerAccount.Api\ --context ApplicationDbContext